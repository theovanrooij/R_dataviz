library(shiny); runApp('Cours/ESIEE/E4/Semestre 1/DSIA_4101C - R et Data Visualization/Projet/main.R')
runApp('Cours/ESIEE/E4/Semestre 1/DSIA_4101C - R et Data Visualization/Projet/main.R')
library(shiny); runApp('Cours/ESIEE/E4/Semestre 1/DSIA_4101C - R et Data Visualization/Projet/main.R')
pays_major
library(lubridate)
library(tidyr)
library(tidyverse)
df <- as_tibble(read.csv("data/players.csv"))
setwd("~/Cours/ESIEE/E4/Semestre 1/DSIA_4101C - R et Data Visualization/Projet")
df <- as_tibble(read.csv("data/players.csv"))
#### PLUS BESOIN DES RANKS
results <- as_tibble(read.csv("data/results.csv"))
majorID <- c(1270,1333,1444,1553,1611,1666,1617,2027,2062,2471,2720,3247,3564,3883,4443)
majorName <- c("DH Winter 2013","Katowice 2014","Cologne 2014","DH Winter 2014",
"Katowice 2015","Cologne 2015","Cluj-Napoca 2015","Colombus 2016","Cologne 2016",
"ELEAGUE Major 2017","Krakow 2017","ELEAGUE Major 2018","FACEIT Major 2018",
"Katowice 2019","Berlin 2019")
### Cluj ne contient que des NA donc on l'exclu
rating_majors <-  df %>%filter (event_id %in% majorID & !is.na(rating))
p_histo_r <- ggplot(rating_majors, aes(x=rating)) +
geom_histogram(binwidth=0.02,fill="lightblue") +
ggtitle('Comptes des ratings sur l\'ensemble des MAJORS')
p_histo_bis_r <- ggplot(rating_majors, aes(x=event_name, y=rating, fill=event_name)) + geom_boxplot()
# On isole les joueurs par tounois puis par pays pour avoir le nombre de reprÃ©sentant(s) de chaque pays par tournoi
pays_tournois_joueur <- df %>% group_by(event_id,event_name,player_id,player_name,country) %>% summarise()
pays_tournois <- pays_tournois_joueur%>% group_by(event_name,event_id,country) %>% summarise(nbRep = n())
pays_major = pays_tournois %>% filter (event_id %in% majorID)
pays_major
runApp('main.R')
pays_major %>% filter(event_id == 1617 )
countries = read.csv("data/countries_codes_and_coordinates.csv")
countries %>% filter (country == "China")
countries[countries == "China"]
countries[countries == "UK"] <- "United Kingdom"
countries[countries == "USA"] <- "United States"
countries[countries == "Mainland China"] <- "China"
pays_tournois = merge(pays_tournois,countries,by="country")
pays_tournois$alpha3[pays_tournois$country == "United States"] <- "USA"
worldcountry = geojson_read("data/50m.geojson", what = "sp")
pays_tournois = pays_tournois[order(pays_tournois$alpha3),]
pays_major = pays_tournois %>% filter (event_id %in% majorID)
pays_major %>% filter(event_id == 1617 )
cluj = pays_tournois %>% filter(event_id ==1617)
# creat cv base map
# Ajouter interraction : liste des joueurs quand on clique dessus
basemap = leaflet(plot_map) %>%
addTiles() %>%
addLayersControl(
options = layersControlOptions(collapsed = FALSE)) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
fitBounds(~-100,-60,~60,70) %>%
addLegend("bottomright", pal = cv_pal, values = ~pays_tournois$nbRep,
title = "<small>ReprÃ©sentant par pays</small>") %>%
addPolygons(data =  worldcountry[worldcountry$ADM0_A3 %in% faceit$alpha3, ],
stroke = FALSE,
smoothFactor = 0.2,
fillOpacity = 0.5,
fillColor = ~cv_pal(faceit$nbRep),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
highlightOptions = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = sprintf(
"<strong>%s</strong><br/>%g",
faceit$country, faceit$nbRep
) %>% lapply(htmltools::HTML),
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")
)
# creat cv base map
# Ajouter interraction : liste des joueurs quand on clique dessus
basemap = leaflet(plot_map) %>%
addTiles() %>%
addLayersControl(
options = layersControlOptions(collapsed = FALSE)) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
fitBounds(~-100,-60,~60,70) %>%
addLegend("bottomright", pal = cv_pal, values = ~pays_tournois$nbRep,
title = "<small>ReprÃ©sentant par pays</small>") %>%
addPolygons(data =  worldcountry[worldcountry$ADM0_A3 %in% cluj$alpha3, ],
stroke = FALSE,
smoothFactor = 0.2,
fillOpacity = 0.5,
fillColor = ~cv_pal(faceit$nbRep),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
highlightOptions = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = sprintf(
"<strong>%s</strong><br/>%g",
cluj$country, cluj$nbRep
) %>% lapply(htmltools::HTML),
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")
)
# creat cv base map
# Ajouter interraction : liste des joueurs quand on clique dessus
basemap = leaflet(plot_map) %>%
addTiles() %>%
addLayersControl(
options = layersControlOptions(collapsed = FALSE)) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
fitBounds(~-100,-60,~60,70) %>%
addLegend("bottomright", pal = cv_pal, values = ~pays_tournois$nbRep,
title = "<small>ReprÃ©sentant par pays</small>") %>%
addPolygons(data =  worldcountry[worldcountry$ADM0_A3 %in% cluj$alpha3, ],
stroke = FALSE,
smoothFactor = 0.2,
fillOpacity = 0.5,
fillColor = ~cv_pal(cluj$nbRep),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
highlightOptions = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = sprintf(
"<strong>%s</strong><br/>%g",
cluj$country, cluj$nbRep
) %>% lapply(htmltools::HTML),
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")
)
# Create plotting parameters for map
bins = c(1,3,5,7,9,11,13,15,16)
cv_pal <- colorBin("Oranges", domain = pays_major$nbRep,bins = bins)
plot_map <- worldcountry[worldcountry$ADM0_A3 %in% pays_tournois$alpha3, ]
cluj = pays_tournois %>% filter(event_id ==1617)
# creat cv base map
# Ajouter interraction : liste des joueurs quand on clique dessus
basemap = leaflet(plot_map) %>%
addTiles() %>%
addLayersControl(
options = layersControlOptions(collapsed = FALSE)) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
fitBounds(~-100,-60,~60,70) %>%
addLegend("bottomright", pal = cv_pal, values = ~pays_tournois$nbRep,
title = "<small>ReprÃ©sentant par pays</small>") %>%
addPolygons(data =  worldcountry[worldcountry$ADM0_A3 %in% cluj$alpha3, ],
stroke = FALSE,
smoothFactor = 0.2,
fillOpacity = 0.5,
fillColor = ~cv_pal(cluj$nbRep),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
highlightOptions = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = sprintf(
"<strong>%s</strong><br/>%g",
cluj$country, cluj$nbRep
) %>% lapply(htmltools::HTML),
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")
)
basemap
print(64)
runApp('main.R')
runApp('main.R')
runApp('main.R')
runApp('main.R')
runApp('main.R')
runApp('main.R')
# creat cv base map
# Ajouter interraction : liste des joueurs quand on clique dessus
basemap = leaflet(plot_map) %>%
addTiles() %>%
addLayersControl(
options = layersControlOptions(collapsed = FALSE)) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
fitBounds(~-100,-60,~60,70) %>%
addLegend("bottomright", pal = cv_pal, values = ~pays_major$nbRep,
title = "<small>ReprÃ©sentant par pays</small>") %>%
addPolygons(data =  worldcountry[worldcountry$ADM0_A3 %in% cluj$alpha3, ],
stroke = FALSE,
smoothFactor = 0.2,
fillOpacity = 0.5,
fillColor = ~cv_pal(cluj$nbRep),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
highlightOptions = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
# label = reactive_label(),
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")
)
basemap
runApp('main.R')
options(warn = 2)
runApp('main.R')
options(warn = 1)
runApp('main.R')
run
options(warn = 0)
options(warn = 1)
runApp('main.R')
runApp('main.R')
# creat cv base map
# Ajouter interraction : liste des joueurs quand on clique dessus
basemap = leaflet(plot_map) %>%
addTiles() %>%
addLayersControl(
options = layersControlOptions(collapsed = FALSE)) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
fitBounds(~-100,-60,~60,70) %>%
addLegend("bottomright", pal = cv_pal, values = ~pays_major$nbRep,
title = "<small>ReprÃ©sentant par pays</small>")
basemap
cluj = pays_major %>% filter(event_id ==1617)
cluj
cluj
pays_major
runApp('main.R')
### Cluj ne contient que des NA donc on l'exclu
rating_majors <-  df %>%filter (event_id %in% majorID & !is.na(rating))
rating_majors
df %>%filter (event_id %in% majorID)
df %>%filter (event_id %in% majorID) %>% select(rating)
p_histo_r <- ggplot(rating_majors, aes(x=rating)) +
geom_histogram(binwidth=0.02,fill="lightblue") +
ggtitle('Comptes des ratings sur l\'ensemble des MAJORS')
p_histo_bis_r <- ggplot(rating_majors, aes(x=event_name, y=rating, fill=event_name)) + geom_boxplot()
p_histo_bis_r
runApp('main.R')
runApp('main.R')
View(dat)
View(dat)
runApp('main.R')
runApp('main.R')
runApp('main.R')
runApp('main.R')
View(db)
runApp('main.R')
runApp('main.R')
runApp('main.R')
runApp('main.R')
pays_major %>% filter(event_id == 1617)
library(lubridate)
library(tidyr)
library(tidyverse)
df <- as_tibble(read.csv("data/players.csv"))
names(df)
#### PLUS BESOIN DES RANKS
results <- as_tibble(read.csv("data/results.csv"))
teams_rank <- data.frame(results %>% group_by(match_id, team_1, team_2, rank_1, rank_2) %>% summarise())
pivot <- pivot_longer(teams_rank, !c("match_id"), names_to = c(".value"), names_pattern= "(.)")
names(df)
df <- merge(df,pivot,by.x=c("match_id","team"),by.y=c("match_id","t"))
names(df)[102] <- "rank_team"
df <- as_tibble(merge(df,pivot,by.x=c("match_id","opponent"),by.y=c("match_id","t")))
names(df)[103] <- "rank_opponent"
names(df)
### CrÃ©ation de l'histogramme avec l'adr
df$adr <- as.integer(df$adr)
majorID <- c(1270,1333,1444,1553,1611,1666,1617,2027,2062,2471,2720,3247,3564,3883,4443)
majorName <- c("DH Winter 2013","Katowice 2014","Cologne 2014","DH Winter 2014",
"Katowice 2015","Cologne 2015","Cluj-Napoca 2015","Colombus 2016","Cologne 2016",
"ELEAGUE Major 2017","Krakow 2017","ELEAGUE Major 2018","FACEIT Major 2018",
"Katowice 2019","Berlin 2019")
### Cluj ne contient que des NA donc on l'exclu
rating_majors <-  df %>%filter (event_id %in% majorID & !is.na(rating))
cluj = pays_major %>% filter(event_id ==1617)
cluj
# On isole les joueurs par tounois puis par pays pour avoir le nombre de reprÃ©sentant(s) de chaque pays par tournoi
pays_tournois_joueur <- df %>% group_by(event_id,event_name,player_id,player_name,country) %>% summarise()
pays_tournois <- pays_tournois_joueur%>% group_by(event_name,event_id,country) %>% summarise(nbRep = n())
countries = read.csv("data/countries_codes_and_coordinates.csv")
countries %>% filter (country == "China")
countries[countries == "China"]
countries[countries == "UK"] <- "United Kingdom"
countries[countries == "USA"] <- "United States"
countries[countries == "Mainland China"] <- "China"
pays_tournois = merge(pays_tournois,countries,by="country")
pays_tournois$alpha3[pays_tournois$country == "United States"] <- "USA"
worldcountry = geojson_read("data/50m.geojson", what = "sp")
pays_tournois = pays_tournois[order(pays_tournois$alpha3),]
pays_major = pays_tournois %>% filter (event_id %in% majorID)
pays_major %>% filter(event_id ==1617)
runApp('main.R')
X = c(2,3,1)
results <- as_tibble(read.csv("data/results.csv"))
X
rank(X)
X = c(2,3,1,7)
rank(X)
df_stats_long
### CrÃ©ation de l'histogramme avec l'adr
df$adr <- as.integer(df$adr)
majorID <- c(1270,1333,1444,1553,1611,1666,1617,2027,2062,2471,2720,3247,3564,3883,4443)
df_stats <- df %>% filter(event_id %in% majorID) %>% group_by(event_id,event_name,player_id,player_name,team) %>%
summarise(nbKills = sum(kills,na.rm=TRUE),nbDeaths = sum(deaths,na.rm=TRUE),kdDiff = sum(kddiff,na.rm = TRUE),
ratio_kd = round(nbKills/nbDeaths,digits=2), tauxHs = round(sum(hs,na.rm=TRUE)/nbKills*100,digits=0),nbAssists =sum(assists,na.rm=TRUE),
nbFlashAssists = sum(flash_assists,na.rm=TRUE),kast = round(mean(kast, na.rm=TRUE),digits=0),
mean_adr = round(mean(adr,na.rm=TRUE),digits=2), mean_rating = round(mean(rating,na.rm=TRUE),digits=2))
df_stats_long <- pivot_longer(df_stats, !c("event_id","event_name","player_id","player_name","team"), names_to = "stat_name", values_to = "value")
df_stats_long
df_stats <- df %>% filter(event_id %in% majorID) %>% group_by(event_id,event_name,player_id,player_name,team) %>%
summarise(nbKills = sum(kills,na.rm=TRUE))
df_stats
df_stats <- df %>% filter(event_id %in% majorID) %>% group_by(event_id,event_name,player_id,player_name,team) %>%
summarise(nbKills = sum(kills,na.rm=TRUE),test = rank(nbKills))
df_stats
df_stats_long
n_df <- names(df_stats_long)
n_df
for (nam in n_df){
print(nam)
}
fname<-c("Joe", "Bob", "Bill", "Tom", "Sue","Sam","Jane","Ruby")
score<-c(500, 490, 500, 750, 550, 500, 210, 320)
dat<-data.frame(fname,score)
dat
order.scores<-order(dat$score,dat$fname)
order.scores
order.scores<-order(dat$score)
order.scores
df_stats$rank_kills[order(df_stats$nbKills),] <- 1:nrow(df_stats)
df_stats$rank_kills <- NA
df_stats$rank_kills[order(df_stats$nbKills),] <- 1:nrow(df_stats)
df_stats <- df %>% filter(event_id %in% majorID) %>% group_by(event_id,event_name,player_id,player_name,team) %>%
summarise(nbKills = sum(kills,na.rm=TRUE),nbDeaths = sum(deaths,na.rm=TRUE),kdDiff = sum(kddiff,na.rm = TRUE),
ratio_kd = round(nbKills/nbDeaths,digits=2), tauxHs = round(sum(hs,na.rm=TRUE)/nbKills*100,digits=0),nbAssists =sum(assists,na.rm=TRUE),
nbFlashAssists = sum(flash_assists,na.rm=TRUE),kast = round(mean(kast, na.rm=TRUE),digits=0),
mean_adr = round(mean(adr,na.rm=TRUE),digits=2), mean_rating = round(mean(rating,na.rm=TRUE),digits=2))
df_stats$rank_kills <- NA
df_stats$rank_kills[order(df_stats$nbKills),] <- 1:nrow(df_stats)
nrow(df_stats)
1:nrow(df_stats)
dat$rank <- NA
dat$rank[order.scores] <- 1:nrow(dat)
dat
order(df_stats$nbKills)
df_stats$rank_kills[order(df_stats$event_id,df_stats$nbKills),] <- 1:nrow(df_stats)
order(df_stats$event_id,df_stats$nbKills)
df_stats$rank_kills[order(df_stats$event_id,df_stats$nbKills)] <- 1:nrow(df_stats)
df_stats
as.data.frame(df_stats %>% arrange(nbKills))
as.data.frame(df_stats %>% arrange(nbKills))
df_stats$rank_kills[order(df_stats$event_id,df_stats$nbKills,ascending=FALSE)] <- 1:nrow(df_stats)
runApp('main.R')
runApp('main.R')
runApp('main.R')
df_stats <- df %>% filter(event_id %in% majorID) %>% group_by(event_id,event_name,player_id,player_name,team) %>%
summarise(nbKills = sum(kills,na.rm=TRUE),nbDeaths = sum(deaths,na.rm=TRUE),kdDiff = sum(kddiff,na.rm = TRUE),
ratio_kd = round(nbKills/nbDeaths,digits=2), tauxHs = round(sum(hs,na.rm=TRUE)/nbKills*100,digits=0),nbAssists =sum(assists,na.rm=TRUE),
nbFlashAssists = sum(flash_assists,na.rm=TRUE),kast = round(mean(kast, na.rm=TRUE),digits=0),
mean_adr = round(mean(adr,na.rm=TRUE),digits=2), mean_rating = round(mean(rating,na.rm=TRUE),digits=2))
df_stats_long <- pivot_longer(df_stats, !c("event_id","event_name","player_id","player_name","team"), names_to = "stat_name", values_to = "value")
df_stats_long %>% filter(event_id == 4443 & player_name="s1mple")
df_stats_long %>% filter(event_id == 4443 & player_name=="s1mple")
df_stats_long %>% filter(event_id == 4443 & player_name=="s1mple" & team=="Natus Vincere")
df_stats_long %>% filter(event_id == 4443 & stat_name=="nbKills")
df_stats_long %>% filter(event_id == 4443 & stat_name=="nbKills") %>% arrange(desc(nbKills))
df_stats_long %>% filter(event_id == 4443 & stat_name=="nbKills") %>% arrange(desc(value))
df_stats_long %>% filter(event_id == 4443 & stat_name=="nbKills") %>% arrange(desc(value)) %>% filter(player_name=="s1mple")
rowname(df_stats_long %>% filter(event_id == 4443 & stat_name=="nbKills") %>% arrange(desc(value)) %>% filter(player_name=="s1mple"))
rownames(df_stats_long %>% filter(event_id == 4443 & stat_name=="nbKills") %>% arrange(desc(value)) %>% filter(player_name=="s1mple"))
rownames(df_stats_long %>% filter(event_id == 4443 & stat_name=="nbKills") %>% arrange(desc(value)) %>% filter(player_name=="s1mple"))[1]
rownames(df_stats_long %>% filter(event_id == 4443 & stat_name=="nbKills") %>% arrange(desc(value)) %>% filter(player_name=="ZywOo"))[1]
df_stats_long %>% filter(event_id == 4443 & stat_name=="nbKills") %>% arrange(desc(value)) %>% filter(player_name=="ZywOo")
df_stats_long %>% filter(event_id == 4443 & stat_name=="nbKills") %>% arrange(desc(value))
df_order <- df_stats_long %>% filter(event_id == 4443 & stat_name=="nbKills") %>% arrange(desc(value))
df_order
df_order$player_name
match(df_order$player_name,"jkaem")
which("jkaem" %in% df_order)
which("jkaem" %in% df_order$player_name)
which("s1mple" %in% df_order$player_name)
x <- sample(1:4,10,replace=TRUE)
which( df_order$player_name %in% "s1mple")
which( df_order$player_name %in% "jkaem")
runApp('main.R')
getPlayerRank <- function (stat,player,event){
df_order <- df_stats_long %>% filter(event_id == event & stat_name==stat) %>% arrange(desc(value))
paste(which(df_order$player_name %in% player)[1],length(df_order$player_name))
}
######
df_stats <- df %>% filter(event_id %in% majorID) %>% group_by(event_id,event_name,player_id,player_name,team) %>%
summarise(nbKills = sum(kills,na.rm=TRUE),nbDeaths = sum(deaths,na.rm=TRUE),kdDiff = sum(kddiff,na.rm = TRUE),
ratio_kd = round((nbKills/nbDeaths )*100,digits=2), tauxHs = round(sum(hs,na.rm=TRUE)/nbKills*100,digits=0),nbAssists =sum(assists,na.rm=TRUE),
nbFlashAssists = sum(flash_assists,na.rm=TRUE),kast = round(mean(kast, na.rm=TRUE),digits=0),
mean_adr = round(mean(adr,na.rm=TRUE),digits=2), mean_rating = round(mean(rating,na.rm=TRUE)*100,digits=2))
df_stats_long <- pivot_longer(df_stats, !c("event_id","event_name","player_id","player_name","team"), names_to = "stat_name", values_to = "value")
getPlayerRank <- function (stat,player,event){
df_order <- df_stats_long %>% filter(event_id == event & stat_name==stat) %>% arrange(desc(value))
paste(which(df_order$player_name %in% player)[1],length(df_order$player_name))
}
getPlayerRank("nbKills",Magisk,4443)
getPlayerRank("nbKills","Magisk",4443)
runApp('main.R')
runApp('main.R')
library(shiny); runApp('main.R')
df <- as_tibble(read.csv("data/players.csv"))
# Importation des données nécessaires pour ajouter le classement des équipes
results <- as_tibble(read.csv("data/results.csv"))
# On isole pour chaque match le classement des deux équipes
teams_rank <- data.frame(results %>% group_by(match_id, team_1, team_2, rank_1, rank_2) %>% summarise())
# On pivote le df précédent pour enlever la notion équipe 1 / équipe 2
# On obtient ainsi un df avec : match_id - équipe - classement
pivot <- pivot_longer(teams_rank, !c("match_id"), names_to = c(".value"), names_pattern= "(.)")
# Nous pouvons commencer la fusion en ajoutant le classement aux df avec les statistiques des joueurs
# La fusion va avoir lieu sur l'id du match et le nom de la team du joueur en matchant l'id et nom d'équipe dans le secon dataframe
df <- merge(df,pivot,by.x=c("match_id","team"),by.y=c("match_id","t"), all.x=TRUE)
names(df)[102] <- "rank_team"
# On réitère l'opértion précédente mais on rajoute le classement de l'équipe adverse
df <- as_tibble(merge(df,pivot,by.x=c("match_id","opponent"),by.y=c("match_id","t")))
names(df)[103] <- "rank_opponent"
# On crée deux vecteurs qui permettent d'isoler les majors
# Nous sommes obligés d'écrire les valeurs en dur car il n'y a pas moyen d'identifier un major uniquement
# par son nom. On pourrait penser à chercher ceux dont le nom contient Major mais le df retournera aussi
# les tournois qualificatif qui contiennent major dans le nom.
majorID <- c(1270,1333,1444,1553,1611,1666,1617,2027,2062,2471,2720,3247,3564,3883,4443)
majorName <- c("DH Winter 2013","Katowice 2014","Cologne 2014","DH Winter 2014",
"Katowice 2015","Cologne 2015","Cluj-Napoca 2015","Colombus 2016","Cologne 2016",
"ELEAGUE Major 2017","Krakow 2017","ELEAGUE Major 2018","FACEIT Major 2018",
"Katowice 2019","Berlin 2019")
df %>% filter(event_id == majorID[7])
df %>% filter(event_id == majorID[8])
df <- as_tibble(read.csv("data/players.csv"))
# Importation des données nécessaires pour ajouter le classement des équipes
results <- as_tibble(read.csv("data/results.csv"))
# On isole pour chaque match le classement des deux équipes
teams_rank <- data.frame(results %>% group_by(match_id, team_1, team_2, rank_1, rank_2) %>% summarise())
# On pivote le df précédent pour enlever la notion équipe 1 / équipe 2
# On obtient ainsi un df avec : match_id - équipe - classement
pivot <- pivot_longer(teams_rank, !c("match_id"), names_to = c(".value"), names_pattern= "(.)")
# Nous pouvons commencer la fusion en ajoutant le classement aux df avec les statistiques des joueurs
# La fusion va avoir lieu sur l'id du match et le nom de la team du joueur en matchant l'id et nom d'équipe dans le secon dataframe
df <- merge(df,pivot,by.x=c("match_id","team"),by.y=c("match_id","t"), all.x=TRUE)
names(df)[102] <- "rank_team"
# On réitère l'opértion précédente mais on rajoute le classement de l'équipe adverse
df <- as_tibble(merge(df,pivot,by.x=c("match_id","opponent"),by.y=c("match_id","t"), all.x=TRUE))
names(df)[103] <- "rank_opponent"
df %>% filter(event_id == majorID[7])
runApp('main.R')
save.image("~/Cours/ESIEE/E4/Semestre 1/DSIA_4101C - R et Data Visualization/Projet/.RData")
