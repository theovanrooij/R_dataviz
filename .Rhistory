cv_large_countries = cv_today %>% filter(alpha3 %in% worldcountry$ADM0_A3)
if (all(cv_large_countries$alpha3 %in% worldcountry$ADM0_A3)==FALSE) { print("Error: inconsistent country names")}
cv_large_countries = cv_large_countries[order(cv_large_countries$alpha3),]
# create plotting parameters for map
bins = c(0,10,50,100,500,1000,Inf)
cv_pal <- colorBin("Oranges", domain = cv_large_countries$cases_per_million, bins = bins)
plot_map <- worldcountry[worldcountry$ADM0_A3 %in% cv_large_countries$alpha3, ]
# creat cv base map
basemap = leaflet(plot_map) %>%
addTiles() %>%
addLayersControl(
position = "bottomright",
overlayGroups = c("2019-COVID (new)", "2019-COVID (cumulative)", "2003-SARS", "2009-H1N1 (swine flu)", "2014-Ebola"),
options = layersControlOptions(collapsed = FALSE)) %>%
hideGroup(c("2019-COVID (cumulative)", "2003-SARS", "2009-H1N1 (swine flu)", "2014-Ebola")) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
fitBounds(~-100,-60,~60,70) %>%
addLegend("bottomright", pal = cv_pal, values = ~cv_large_countries$deaths_per_million,
title = "<small>Deaths per million</small>")
basemap
# sum cv case counts by date
cv_aggregated = aggregate(cv_cases$cases, by=list(Category=cv_cases$date), FUN=sum)
names(cv_aggregated) = c("date", "cases")
# add variable for new cases in last 7 days
for (i in 1:nrow(cv_aggregated)) {
if (i==1) { cv_aggregated$new[i] = 0 }
if (i>1) { cv_aggregated$new[i] = cv_aggregated$cases[i] - cv_aggregated$cases[i-1] }
}
# add plotting region
cv_aggregated$region = "Global"
cv_aggregated$date = as.Date(cv_aggregated$date,"%Y-%m-%d")
# assign colours to countries to ensure consistency between plots
cls = rep(c(brewer.pal(8,"Dark2"), brewer.pal(10, "Paired"), brewer.pal(12, "Set3"), brewer.pal(8,"Set2"), brewer.pal(9, "Set1"), brewer.pal(8, "Accent"),  brewer.pal(9, "Pastel1"),  brewer.pal(8, "Pastel2")),4)
cls_names = c(as.character(unique(cv_cases$country)), as.character(unique(cv_cases_continent$continent)), as.character(unique(cv_states$state)),"Global")
country_cols = cls[1:length(cls_names)]
names(country_cols) = cls_names
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(lubridate)
library(tidyr)
library(tidyverse)
df <- as_tibble(read.csv("data/players.csv"))
names(df)
results <- as_tibble(read.csv("data/results.csv"))
median(results$rank_1)
# Pas tous les ids de chaque table. Dans result, on retrouve des tournois peu populaire et pas dans players
diff <-setdiff(id_df,id_result)
length(diff)
teams_rank <- data.frame(results %>% group_by(match_id, team_1, team_2, rank_1, rank_2) %>% summarise())
pivot <- pivot_longer(teams_rank, !c("match_id"), names_to = c(".value"), names_pattern= "(.)")
df <- merge(df,pivot,by.x=c("match_id","team"),by.y=c("match_id","t"))
df <- as_tibble(merge(df,pivot,by.x=c("match_id","opponent"),by.y=c("match_id","t")))
# On isole les joueurs par tounois puis pay pays pour avopir le nombre de représentant d chaque pays par tournoi
pays_tournois <- df %>% group_by(event_id,event_name,player_id,player_name,country) %>% summarise() %>% group_by(event_id,event_name,country) %>% summarise(nbRep = n())
starlader = pays_tournois %>% filter(event_id == 4443)
starlader
worldcountry = geojson_read("data/50m.geojson", what = "sp")
if(!require(geojsonio)) install.packages("geojsonio", repos = "http://cran.us.r-project.org")
worldcountry = geojson_read("data/50m.geojson", what = "sp")
View(worldcountry)
# create plotting parameters for map
cv_pal <- colorBin("Reds", domain = starlader$nbRep)
if(!require(leaflet)) install.packages("leaflet", repos = "http://cran.us.r-project.org")
if(!require(ggplot2)) install.packages("ggplot2", repos = "http://cran.us.r-project.org")
# create plotting parameters for map
cv_pal <- colorBin("Reds", domain = starlader$nbRep)
plot_map <- worldcountry[worldcountry$ADM0_A3 %in% cv_large_countries$alpha3, ]
countries = read.csv("input_data/countries_codes_and_coordinates.csv")
countries = read.csv("data/countries_codes_and_coordinates.csv")
countries
names(countries)
countries[1]
plot_map <- worldcountry[worldcountry$ADM0_A3 %in% countries$alpha3, ]
leaflet(plot_map) %>%
addTiles()
# creat cv base map
basemap = leaflet(plot_map) %>%
addTiles() %>%
addLayersControl(
position = "bottomright",
overlayGroups = c("2019-COVID (new)", "2019-COVID (cumulative)", "2003-SARS", "2009-H1N1 (swine flu)", "2014-Ebola"),
options = addProviderTiles(providers$CartoDB.Positron) %>%
fitBounds(~-100,-60,~60,70) %>%
addLegend("bottomright", pal = cv_pal, values = ~cv_large_countries$deaths_per_million,
title = "<small>Deaths per million</small>") )
# creat cv base map
basemap = leaflet(plot_map) %>%
addTiles() %>%
addLayersControl(
options = addProviderTiles(providers$CartoDB.Positron) %>%
fitBounds(~-100,-60,~60,70)  )
library(lubridate)
library(tidyr)
library(tidyverse)
if(!require(geojsonio)) install.packages("geojsonio", repos = "http://cran.us.r-project.org")
if(!require(leaflet)) install.packages("leaflet", repos = "http://cran.us.r-project.org")
if(!require(ggplot2)) install.packages("ggplot2", repos = "http://cran.us.r-project.org")
df <- as_tibble(read.csv("data/players.csv"))
names(df)
results <- as_tibble(read.csv("data/results.csv"))
median(results$rank_1)
# Pas tous les ids de chaque table. Dans result, on retrouve des tournois peu populaire et pas dans players
diff <-setdiff(id_df,id_result)
length(diff)
teams_rank <- data.frame(results %>% group_by(match_id, team_1, team_2, rank_1, rank_2) %>% summarise())
pivot <- pivot_longer(teams_rank, !c("match_id"), names_to = c(".value"), names_pattern= "(.)")
df <- merge(df,pivot,by.x=c("match_id","team"),by.y=c("match_id","t"))
df <- as_tibble(merge(df,pivot,by.x=c("match_id","opponent"),by.y=c("match_id","t")))
# On isole les joueurs par tounois puis pay pays pour avopir le nombre de représentant d chaque pays par tournoi
pays_tournois <- df %>% group_by(event_id,event_name,player_id,player_name,country) %>% summarise() %>% group_by(event_id,event_name,country) %>% summarise(nbRep = n())
starlader = pays_tournois %>% filter(event_id == 4443)
starlader
countries = read.csv("data/countries_codes_and_coordinates.csv")
countries[1]
worldcountry = geojson_read("data/50m.geojson", what = "sp")
# create plotting parameters for map
cv_pal <- colorBin("Reds", domain = starlader$nbRep)
plot_map <- worldcountry[worldcountry$ADM0_A3 %in% countries$alpha3, ]
# creat cv base map
basemap = leaflet(plot_map) %>%
addTiles() %>%
addLayersControl(
options = addProviderTiles(providers$CartoDB.Positron) %>%
fitBounds(~-100,-60,~60,70)  )
providers$CartoDB.Positron
providers
eaflet(plot_map) %>%
addTiles()
leaflet(plot_map) %>%
addTiles()
leaflet(plot_map) %>%
addTiles() %>%
addLayersControl(
options = addProviderTiles("CartoDB.Positron") %>%
fitBounds(~-100,-60,~60,70)  )
leaflet(plot_map) %>%
addTiles() %>%
addLayersControl(
options = addProviderTiles("CartoDB.Positron")
)
leaflet(plot_map) %>%
addTiles() %>%
addLayersControl(
fitBounds(~-100,-60,~60,70)  )
plot_map <- worldcountry[worldcountry$ADM0_A3 %in% countries$alpha3, ]
leaflet(plot_map) %>%
addTiles() %>%
addLayersControl(
position = "bottomright",
overlayGroups = c("2019-COVID (new)", "2019-COVID (cumulative)", "2003-SARS", "2009-H1N1 (swine flu)", "2014-Ebola"),
options = layersControlOptions(collapsed = FALSE)) %>%
hideGroup(c("2019-COVID (cumulative)", "2003-SARS", "2009-H1N1 (swine flu)", "2014-Ebola")) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
fitBounds(~-100,-60,~60,70) %>%
addLegend("bottomright", pal = cv_pal, values = ~cv_large_countries$deaths_per_million,
title = "<small>Deaths per million</small>")
leaflet(plot_map) %>%
addTiles() %>%
addLayersControl(
position = "bottomright",
overlayGroups = c("2019-COVID (new)", "2019-COVID (cumulative)", "2003-SARS", "2009-H1N1 (swine flu)", "2014-Ebola"),
options = layersControlOptions(collapsed = FALSE)) %>%
hideGroup(c("2019-COVID (cumulative)", "2003-SARS", "2009-H1N1 (swine flu)", "2014-Ebola")) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
fitBounds(~-100,-60,~60,70)
leaflet(plot_map) %>%
addTiles() %>%
addLayersControl(
options = layersControlOptions(collapsed = FALSE)) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
fitBounds(~-100,-60,~60,70)
View(starlader)
names(countries)
merge(starlader,countries,by="country")
# create plotting parameters for map
bins = c(0,1,3,5,7,10,20,Inf)
cv_pal <- colorBin("Reds", domain = starlader$nbRep,bins = bins)
plot_map <- worldcountry[worldcountry$ADM0_A3 %in% starlader$alpha3, ]
names(starlader)
starlader =merge(starlader,countries,by="country")
worldcountry = geojson_read("data/50m.geojson", what = "sp")
names(starlader)
# create plotting parameters for map
bins = c(0,1,3,5,7,10,20,Inf)
cv_pal <- colorBin("Reds", domain = starlader$nbRep,bins = bins)
plot_map <- worldcountry[worldcountry$ADM0_A3 %in% starlader$alpha3, ]
# creat cv base map
basemap = leaflet(plot_map) %>%
addTiles() %>%
addLayersControl(
options = layersControlOptions(collapsed = FALSE)) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
fitBounds(~-100,-60,~60,70)
basemap
# creat cv base map
basemap = leaflet(plot_map) %>%
addTiles() %>%
addLayersControl(
options = layersControlOptions(collapsed = FALSE)) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
fitBounds(~-100,-60,~60,70) %>%
addLegend("bottomright", pal = cv_pal, values = ~starlader$nbRep,
title = "<small>Représentant par pays</small>")
basemap
cv_pal
plot_map
cv_large_countries
starlader
starlader[1,]
starlader = starlader[order(starlader$alpha3),]
# create plotting parameters for map
bins = c(1,3,5,7,10,20,Inf)
cv_pal <- colorBin("Reds", domain = starlader$nbRep,bins = bins)
plot_map <- worldcountry[worldcountry$ADM0_A3 %in% starlader$alpha3, ]
# creat cv base map
basemap = leaflet(plot_map) %>%
addTiles() %>%
addLayersControl(
options = layersControlOptions(collapsed = FALSE)) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
fitBounds(~-100,-60,~60,70) %>%
addLegend("bottomright", pal = cv_pal, values = ~starlader$nbRep,
title = "<small>Représentant par pays</small>")
basemap
# creat cv base map
basemap = leaflet(plot_map) %>%
addTiles() %>%
addLayersControl(
options = layersControlOptions(collapsed = FALSE)) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
fitBounds(~-100,-60,~60,70) %>%
addLegend("bottomright", pal = cv_pal, values = ~starlader$nbRep,
title = "<small>Représentant par pays</small>") %>%
addPolygons(data = starlader, stroke = FALSE, smoothFactor = 0.1, fillOpacity = 0.15, fillColor = ~starlader$nbRep)
# creat cv base map
basemap = leaflet(plot_map) %>%
addTiles() %>%
addLayersControl(
options = layersControlOptions(collapsed = FALSE)) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
fitBounds(~-100,-60,~60,70) %>%
addLegend("bottomright", pal = cv_pal, values = ~starlader$nbRep,
title = "<small>Représentant par pays</small>") %>%
addPolygons(data = reactive({starlader}), stroke = FALSE, smoothFactor = 0.1, fillOpacity = 0.15, fillColor = ~starlader$nbRep)
creat cv base map
basemap = leaflet(plot_map) %>%
addTiles() %>%
addLayersControl(
options = layersControlOptions(collapsed = FALSE)) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
fitBounds(~-100,-60,~60,70) %>%
addLegend("bottomright", pal = cv_pal, values = ~starlader$nbRep,
title = "<small>Représentant par pays</small>") %>%
addPolygons(stroke = FALSE, smoothFactor = 0.1, fillOpacity = 0.15, fillColor = ~starlader$nbRep)
basemap
# creat cv base map
basemap = leaflet(plot_map) %>%
addTiles() %>%
addLayersControl(
options = layersControlOptions(collapsed = FALSE)) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
fitBounds(~-100,-60,~60,70) %>%
addLegend("bottomright", pal = cv_pal, values = ~starlader$nbRep,
title = "<small>Représentant par pays</small>") %>%
addPolygons(stroke = FALSE, smoothFactor = 0.1, fillOpacity = 0.15, fillColor = ~~cv_pal(starlader$nbRep))
basemap
# creat cv base map
basemap = leaflet(plot_map) %>%
addTiles() %>%
addLayersControl(
options = layersControlOptions(collapsed = FALSE)) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
fitBounds(~-100,-60,~60,70) %>%
addLegend("bottomright", pal = cv_pal, values = ~starlader$nbRep,
title = "<small>Représentant par pays</small>") %>%
addPolygons(stroke = FALSE, smoothFactor = 0.1, fillOpacity = 0.15, fillColor = ~cv_pal(starlader$nbRep))
basemap
# creat cv base map
basemap = leaflet(plot_map) %>%
addTiles() %>%
addLayersControl(
options = layersControlOptions(collapsed = FALSE)) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
fitBounds(~-100,-60,~60,70) %>%
addLegend("bottomright", pal = cv_pal, values = ~starlader$nbRep,
title = "<small>Représentant par pays</small>") %>%
addPolygons(stroke = FALSE, smoothFactor = 0.1, fillOpacity = 0.55, fillColor = ~cv_pal(starlader$nbRep))
basemap
names(countries)
starlader = pays_tournois %>% filter(event_id == 4443)
starlader
# On isole les joueurs par tounois puis pay pays pour avopir le nombre de représentant d chaque pays par tournoi
pays_tournois <- df %>% group_by(event_id,event_name,player_id,player_name,country) %>% summarise() %>% group_by(event_id,event_name,country) %>% summarise(nbRep = n())
starlader = pays_tournois %>% filter(event_id == 4443)
unique(starlader$country)
starlader = pays_tournois %>% filter(event_id == 4443)
starlader
countries = read.csv("data/countries_codes_and_coordinates.csv")
names(countries)
starlader =merge(starlader,countries,by="country")
worldcountry = geojson_read("data/50m.geojson", what = "sp")
starlader = starlader[order(starlader$alpha3),]
unique(starlader$country)
pays_tournois
# On isole les joueurs par tounois puis pay pays pour avopir le nombre de représentant d chaque pays par tournoi
pays_tournois <- df %>% group_by(event_id,event_name,player_id,player_name,country) %>% summarise() %>% group_by(event_id,event_name,country) %>% summarise(nbRep = n())
starlader = pays_tournois %>% filter(event_id == 4443)
starlader
length(starlader)
length(unique(starlader$country))
starlader =merge(starlader,countries,by="country")
worldcountry = geojson_read("data/50m.geojson", what = "sp")
starlader = starlader[order(starlader$alpha3),]
length(unique(starlader$country))
unique(countries$country)
countries %>% query(country == "United States")
countries %>% filter(country == "United States")
countries %>% filter(country == "United States of America")
countries %>% filter(country == "US")
countries %>% filter(country == "USA")
starlader %>% filter(country == "United States")
starlader %>% filter(country == "United Kingdom")
starlader = pays_tournois %>% filter(event_id == 4443)
starlader %>% filter(country == "United Kingdom")
starlader %>% filter(country == "United Kingdom")
(starlader %>% filter(country == "United Kingdom"))$country
# On isole les joueurs par tounois puis pay pays pour avopir le nombre de représentant d chaque pays par tournoi
pays_tournois <- df %>% group_by(event_id,event_name,player_id,player_name,country) %>% summarise() %>% group_by(event_id,event_name,country) %>% summarise(nbRep = n())
starlader = pays_tournois %>% filter(event_id == 4443)
(starlader %>% filter(country == "United Kingdom"))$country <- "UK"
(starlader %>% filter(country == "United States"))$country <- "USA"
countries = read.csv("data/countries_codes_and_coordinates.csv")
(starlader %>% filter(country == "United Kingdom"))$country = "UK"
(starlader %>% filter(country == "United Kingdom"))$country = "UK"
(starlader %>% filter(country == "United Kingdom"))$country
# create plotting parameters for map
bins = c(1:20)
starlader %>% filter(country == "United Kingdom")
starlader %>% filter(country == "United Kingdom") [4]
(starlader %>% filter(country == "United Kingdom")) [4]
(starlader %>% filter(country == "United Kingdom")) [3]
(starlader %>% filter(country == "United Kingdom")) [3] <- "UK"
((starlader %>% filter(country == "United Kingdom")) [3]) <- "UK"
(starlader %>% filter(country == "United Kingdom"))[[3]] <- "UK"
(starlader %>% filter(country == "United Kingdom"))[[3]]
(starlader %>% filter(country == "United Kingdom"))[[3]][1] <- "UK"
(starlader %>% filter(country == "United Kingdom"))[[3]][1]
uk <- starlader %>% filter(country == "United Kingdom")
uk$country
uk$country <- "United"
uk
starlader[starlader$country == "United Kingdom"]
starlader = pays_tournois %>% filter(event_id == 4443)
starlader[starlader$country == "United Kingdom"]
starlader[starlader == "United Kingdom" ]
starlader[starlader == "United Kingdom"] <- "UK"
starlader[starlader == "United States"] <- "USA"
names(countries)
starlader =merge(starlader,countries,by="country")
unique(starlader$country)
starlader = starlader[order(starlader$alpha3),]
# create plotting parameters for map
bins = c(1:20)
cv_pal <- colorBin("Reds", domain = starlader$nbRep,bins = bins)
plot_map <- worldcountry[worldcountry$ADM0_A3 %in% starlader$alpha3, ]
# creat cv base map
basemap = leaflet(plot_map) %>%
addTiles() %>%
addLayersControl(
options = layersControlOptions(collapsed = FALSE)) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
fitBounds(~-100,-60,~60,70) %>%
addLegend("bottomright", pal = cv_pal, values = ~starlader$nbRep,
title = "<small>Représentant par pays</small>") %>%
addPolygons(stroke = FALSE, smoothFactor = 0.1, fillOpacity = 0.55, fillColor = ~cv_pal(starlader$nbRep))
basemap
# create plotting parameters for map
bins = c(1:20:2)
cv_pal <- colorBin("Reds", domain = starlader$nbRep,bins = bins)
plot_map <- worldcountry[worldcountry$ADM0_A3 %in% starlader$alpha3, ]
# creat cv base map
basemap = leaflet(plot_map) %>%
addTiles() %>%
addLayersControl(
options = layersControlOptions(collapsed = FALSE)) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
fitBounds(~-100,-60,~60,70) %>%
addLegend("bottomright", pal = cv_pal, values = ~starlader$nbRep,
title = "<small>Représentant par pays</small>") %>%
addPolygons(stroke = FALSE, smoothFactor = 0.1, fillOpacity = 0.55, fillColor = ~cv_pal(starlader$nbRep))
basemap
# create plotting parameters for map
bins = c(1,3,5,7,9,11,13,15,Inf)
cv_pal <- colorBin("Oranges", domain = starlader$nbRep,bins = bins)
plot_map <- worldcountry[worldcountry$ADM0_A3 %in% starlader$alpha3, ]
# creat cv base map
basemap = leaflet(plot_map) %>%
addTiles() %>%
addLayersControl(
options = layersControlOptions(collapsed = FALSE)) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
fitBounds(~-100,-60,~60,70) %>%
addLegend("bottomright", pal = cv_pal, values = ~starlader$nbRep,
title = "<small>Représentant par pays</small>") %>%
addPolygons(stroke = FALSE, smoothFactor = 0.1, fillOpacity = 0.6, fillColor = ~cv_pal(starlader$nbRep))
basemap
# On isole les joueurs par tounois puis pay pays pour avopir le nombre de représentant d chaque pays par tournoi
pays_tournois <- df %>% group_by(event_id,event_name,player_id,player_name,country) %>% summarise() %>% group_by(event_name,country) %>% summarise(nbRep = n())
starlader = pays_tournois %>% filter(event_id == 4443)
starlader[starlader == "United Kingdom"] <- "UK"
starlader[starlader == "United States"] <- "USA"
countries = read.csv("data/countries_codes_and_coordinates.csv")
names(countries)
starlader =merge(starlader,countries,by="country")
worldcountry = geojson_read("data/50m.geojson", what = "sp")
starlader = starlader[order(starlader$alpha3),]
# create plotting parameters for map
bins = c(1,3,5,7,9,11,13,15,Inf)
cv_pal <- colorBin("Oranges", domain = starlader$nbRep,bins = bins)
plot_map <- worldcountry[worldcountry$ADM0_A3 %in% starlader$alpha3, ]
# creat cv base map
basemap = leaflet(plot_map) %>%
addTiles() %>%
addLayersControl(
options = layersControlOptions(collapsed = FALSE)) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
fitBounds(~-100,-60,~60,70) %>%
addLegend("bottomright", pal = cv_pal, values = ~starlader$nbRep,
title = "<small>Représentant par pays</small>") %>%
addPolygons(stroke = FALSE, smoothFactor = 0.1, fillOpacity = 0.6, fillColor = ~cv_pal(starlader$nbRep))
basemap
if(!require(geojsonio)) install.packages("geojsonio", repos = "http://cran.us.r-project.org")
if(!require(leaflet)) install.packages("leaflet", repos = "http://cran.us.r-project.org")
if(!require(ggplot2)) install.packages("ggplot2", repos = "http://cran.us.r-project.org")
# On isole les joueurs par tounois puis pay pays pour avopir le nombre de représentant d chaque pays par tournoi
pays_tournois <- df %>% group_by(event_id,event_name,player_id,player_name,country) %>% summarise() %>% group_by(event_name,country) %>% summarise(nbRep = n())
starlader = pays_tournois %>% filter(event_id == 4443)
starlader[starlader == "United Kingdom"] <- "UK"
starlader[starlader == "United States"] <- "USA"
countries = read.csv("data/countries_codes_and_coordinates.csv")
names(countries)
starlader =merge(starlader,countries,by="country")
worldcountry = geojson_read("data/50m.geojson", what = "sp")
# On isole les joueurs par tounois puis pay pays pour avopir le nombre de représentant d chaque pays par tournoi
pays_tournois <- df %>% group_by(event_id,event_name,player_id,player_name,country) %>% summarise() %>% group_by(event_name,country) %>% summarise(nbRep = n())
starlader = pays_tournois %>% filter(event_id == 4443)
# On isole les joueurs par tounois puis pay pays pour avopir le nombre de représentant d chaque pays par tournoi
pays_tournois <- df %>% group_by(event_id,event_name,player_id,player_name,country) %>% summarise() %>% group_by(event_name,event_id,country) %>% summarise(nbRep = n())
starlader = pays_tournois %>% filter(event_id == 4443)
starlader[starlader == "United Kingdom"] <- "UK"
starlader[starlader == "United States"] <- "USA"
countries = read.csv("data/countries_codes_and_coordinates.csv")
names(countries)
starlader =merge(starlader,countries,by="country")
worldcountry = geojson_read("data/50m.geojson", what = "sp")
starlader = starlader[order(starlader$alpha3),]
# create plotting parameters for map
bins = c(1,3,5,7,9,11,13,15,Inf)
cv_pal <- colorBin("Oranges", domain = starlader$nbRep,bins = bins)
plot_map <- worldcountry[worldcountry$ADM0_A3 %in% starlader$alpha3, ]
# creat cv base map
basemap = leaflet(plot_map) %>%
addTiles() %>%
addLayersControl(
options = layersControlOptions(collapsed = FALSE)) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
fitBounds(~-100,-60,~60,70) %>%
addLegend("bottomright", pal = cv_pal, values = ~starlader$nbRep,
title = "<small>Représentant par pays</small>") %>%
addPolygons(stroke = FALSE, smoothFactor = 0.1, fillOpacity = 0.6, fillColor = ~cv_pal(starlader$nbRep))
basemap
# creat cv base map
basemap = leaflet(plot_map) %>%
addTiles() %>%
addLayersControl(
options = layersControlOptions(collapsed = FALSE)) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
fitBounds(~-100,-60,~60,70) %>%
addLegend("bottomright", pal = cv_pal, values = ~starlader$nbRep,
title = "<small>Représentant par pays</small>") %>%
addPolygons(stroke = FALSE, smoothFactor = 0.1, fillOpacity = 1, fillColor = ~cv_pal(starlader$nbRep))
basemap
# creat cv base map
basemap = leaflet(plot_map) %>%
addTiles() %>%
addLayersControl(
options = layersControlOptions(collapsed = FALSE)) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
fitBounds(~-100,-60,~60,70) %>%
addLegend("bottomright", pal = cv_pal, values = ~starlader$nbRep,
title = "<small>Représentant par pays</small>") %>%
addPolygons(stroke = FALSE, smoothFactor = 1, fillOpacity = 1, fillColor = ~cv_pal(starlader$nbRep))
basemap
# creat cv base map
basemap = leaflet(plot_map) %>%
addTiles() %>%
addLayersControl(
options = layersControlOptions(collapsed = FALSE)) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
fitBounds(~-100,-60,~60,70) %>%
addLegend("bottomright", pal = cv_pal, values = ~starlader$nbRep,
title = "<small>Représentant par pays</small>") %>%
addPolygons(stroke = FALSE, smoothFactor = 1, fillOpacity = 0.5, fillColor = ~cv_pal(starlader$nbRep))
basemap
